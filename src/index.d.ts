/** Declaration file generated by dts-gen */

interface FunctionObject {
    [key: string]:  (item: any) => boolean,
}

function MapFunction(value: any, key: string, index: number): any;

export function assassinate(source: any, path: (string | string[])): any;
export function assurePathExists(object: any, path: (string | string[]), defaultValue: any): boolean;
export function clone(source): any;
export function deepEq(left: any, right: any): boolean;
export function firstKey(object: Object): string;
export function firstValue(object: Object): any;
export function get(object: any, path: string, defaultValue?: any): any;
export function getObjectPath(path: string): string[];
export function getStringPathForArray(arrayPath: string[]): string;
export function getTypeString(data: any): string;
export function has(object: any, key: string | string[]): boolean;
export function hasRoot(object: any, key: string | string[]): boolean;
export function keys(object: any): string[];
export function lastKey(object: Object): string;
export function lastValue(object: Object): any;
export function mapObject(object: Object, callback: MapFunction): any;
export function omit(object, blacklistedKeys): any;
export function partition(list: Array, conditionFunctionObject: FunctionObject, defaultKey: string)
export function pick(object: any, whitelistedKeys: (string | string[])[]): any;
export function set(object: any, path: string, value: any): any;
export function shallowDiff(original: any, incoming: any): any[];
export function subAssign(destinationObject: Object, subPath: (string | string[]), source: any): Object;
export function values(object: any): any[];
export function yank(object: any, path: string, defaultValue?: any): any;